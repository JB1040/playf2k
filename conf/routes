

#
# ARTICLES
#

# Get article by author.
GET     /api/articles/byAuthor/:id     controllers.ArticlesController.byAuthor(id: Long)


GET     /api/articles/featured             controllers.ArticlesController.getFeatured()

# Get article list, optional offset,amount
GET     /api/articles/list             controllers.ArticlesController.getArticles(offset: Int ?= 0,amount: Int ?= 20, type: String ?= null,game: String ?= null)


#GET    /api/articles/edit              controllers.ArticlesController.editInsertArticle(id: Long ?= -1)

#POST    /api/articles/edit              controllers.ArticlesController.doEditInsertArticle()


# Get direct article
GET     /api/articles/upvote/:id       controllers.ArticlesController.upvoteArticle(id: Long)

# Get direct article
GET     /api/articles/:id              controllers.ArticlesController.getArticle(id: Long)


# Get list of users
GET     /api/users/login              controllers.UserController.login(url: String ?= null)


# Get list of users
POST     /api/users/login              controllers.UserController.doLogin()

# Get list of users
GET     /api/users/list              controllers.UserController.getUsers(offset: Int ?= 0,amount: Int ?= 50,online: String ?= null)


# Get direct user
GET     /api/users/:id              controllers.UserController.getUser(id: Long)


# Get article by author.
GET     /api/decks/byAuthor/:id     controllers.DeckArticlesController.byAuthor(id: Long)

# Get article list, optional offset,amount
GET     /api/decks/list             controllers.DeckArticlesController.getArticles(offset: Int ?= 0,amount: Int ?= 20, tier: Int ?= 0,mode: String ?= null, isStandard: String ?= null, faction: String ?= null, leader: String ?= null, game: String ?= null)


#GET    /api/decks/edit              controllers.DeckArticlesController.editInsertArticle(id: Long ?= -1)

#POST    /api/decks/edit              controllers.DeckArticlesController.doEditInsertArticle()

GET    /api/decks/editgw             controllers.DeckArticlesController.editInsertArticleGW(id: Long ?= -1)

POST    /api/decks/editgw             controllers.DeckArticlesController.doEditInsertArticleGW()


# Get direct article
GET     /api/decks/upvote/:id       controllers.DeckArticlesController.upvoteArticle(id: Long)

# Get direct article
GET     /api/decks/:id              controllers.DeckArticlesController.getArticle(id: Long)




# Get direct article
GET     /api/cards/all             controllers.DeckArticlesController.allCards()


# Get direct article
GET     /api/gwcards/all             controllers.DeckArticlesController.allGwentCards()


GET /overlaySQR						 controllers.ArticlesController.overlaySQR()

GET /overlayREC					 controllers.ArticlesController.overlayREC()

GET /overlaySQRTP				 controllers.ArticlesController.overlaySQRTP()

GET /overlayRECTP				 controllers.ArticlesController.overlayRECTP()

GET /overlaySQRTPSlow			 controllers.ArticlesController.overlaySQRTPSlow()

GET /overlayRECTPSlow			 controllers.ArticlesController.overlayRECTPSlow()

GET /overlayWOW     			 controllers.ArticlesController.overlayWOW()

GET /jsonSQR					 controllers.ArticlesController.jsonSQR()

GET /jsonREC					 controllers.ArticlesController.jsonREC()

GET /jsonSQRTP					 controllers.ArticlesController.jsonSQRTP()

GET /jsonRECTP					 controllers.ArticlesController.jsonRECTP()

GET /jsonWOW    				 controllers.ArticlesController.jsonWOW()

GET    /api/ads/edit              controllers.ArticlesController.editAds()

GET    /api/edit              			controllers.GeneralController.editInsertArticle(id: Long ?= -1)
POST    /api/edit              			controllers.GeneralController.doEditInsertArticle()

GET     /api/topdecks/list      		controllers.GeneralController.getTierArticles(offset: Int ?= 0,amount: Int ?= 20,game: String ?= "HS", isStandard: String ?= null,classes: String?= null)
GET     /api/topdecks/:id             	controllers.GeneralController.getArticle(id: Long)

#GET    /api/beta/:id          controllers.ArticlesController.doBeta(id: Long)
#GET    /api/dbeta/:id          controllers.DeckArticlesController.doBeta(id: Long)
GET    /api/fixDecks        controllers.DeckArticlesController.doBetaCards()
GET    /api/gwbeta          controllers.DeckArticlesController.doBetaCardsGW()

POST    /api/ads/edit              controllers.ArticlesController.doEditAds()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                   controllers.Assets.versioned(path="/public", file: Asset)
